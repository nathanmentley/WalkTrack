version: "3.9"
services:
  couchdb:
    container_name: couchdb
    image: bitnami/couchdb:latest
    environment:
      - COUCHDB_USER=${COUCHDB_USER}
      - COUCHDB_PASSWORD=${COUCHDB_PASSWORD}
    expose:
      - 5984
    ports:
      - "5984:5984"
    volumes:
      - ./data/couchdb:/bitnami/couchdb
    restart: unless-stopped

  couchdbbackup:
    container_name: couchdbbackup
    image: tiredofit/db-backup
    volumes:
      - ./data/backups/couchdb:/backup
    environment:
      - DB_TYPE=couch
      - DB_HOST=couchdb
      - DB_USER=${COUCHDB_USER}
      - DB_PASS=${COUCHDB_PASSWORD}
      - DB_DUMP_FREQ=1440
      - DB_DUMP_BEGIN=0120
      - DB_CLEANUP_TIME=10080
      - MD5=TRUE
      - COMPRESSION=XZ
      - SPLIT_DB=FALSE

  mssql:
    container_name: mssql
    build:
      context: infastruction/Mssql
      dockerfile: dockerfile
      args:
        WalktrackEnvironment: ${WALKTRACK_ENVIRONMENT}
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=${MSSQL_PASSWORD}
      - MSSQL_PID=Express
    expose:
      - 1433
    ports:
      - "1433:1433"
    volumes:
      - ./data/mssql:/var/opt/mssql
      - ./data/backups/mssql:/backup
    restart: unless-stopped

  mssqlbackup:
    container_name: mssqlbackup
    image: bbtsoftwareag/mssql-backup
    volumes:
      - ./data/backups/mssql:/backup
    environment:
      - TZ=America/Detroit
      - DB_SERVER=mssql
      - DB_USER=SA
      - DB_PASSWORD=${MSSQL_PASSWORD}
      - "DB_NAMES=
          UserDb"
      - CRON_SCHEDULE=20 1 * * *
      - BACKUP_CLEANUP=true
      - BACKUP_AGE=7
      - PACK=tar

  emailservice:
    container_name: emailservice
    build:
      context: .
      dockerfile: src/Server/EmailService/dockerfile
      args:
        WalktrackEnvironment: ${WALKTRACK_ENVIRONMENT}
    environment:
    - AuthenticationSettings__JwtSecret=${JWT_SECRET}
    - ConnectionSettings__ApiKey=${SENDGRID_API_KEY}
    expose:
    - 8003
    restart: unless-stopped

  entryservice:
    container_name: entryservice
    build:
      context: .
      dockerfile: src/Server/EntryService/dockerfile
      args:
        WalktrackEnvironment: ${WALKTRACK_ENVIRONMENT}
    environment:
    - AuthenticationSettings__JwtSecret=${JWT_SECRET}
    - DalSettings__ConnectionString=${COUCHDB_CONNECTION_STRING}
    - DalSettings__Username=${COUCHDB_USER}
    - DalSettings__Password=${COUCHDB_PASSWORD}
    expose:
    - 8001
    depends_on:
    - couchdb
    restart: unless-stopped

  goalservice:
    container_name: goalservice
    build:
      context: .
      dockerfile: src/Server/GoalService/dockerfile
      args:
        WalktrackEnvironment: ${WALKTRACK_ENVIRONMENT}
    environment:
    - AuthenticationSettings__JwtSecret=${JWT_SECRET}
    - DalSettings__ConnectionString=${COUCHDB_CONNECTION_STRING}
    - DalSettings__Username=${COUCHDB_USER}
    - DalSettings__Password=${COUCHDB_PASSWORD}
    expose:
    - 8002
    depends_on:
    - couchdb
    restart: unless-stopped

  userservice:
    container_name: userservice
    build:
      context: .
      dockerfile: src/Server/UserService/dockerfile
      args:
        WalktrackEnvironment: ${WALKTRACK_ENVIRONMENT}
    environment:
    - AuthenticationSettings__JwtSecret=${JWT_SECRET}
    - DalSettings__ConnectionString=${MSSQL_CONNECTION_STRING}
    - AdminSettings__AdminUsername=${ADMIN_USERNAME}
    - AdminSettings__AdminPassword=${ADMIN_PASSWORD}
    expose:
    - 8000
    depends_on:
    - mssql
    - emailservice
    restart: unless-stopped

  app:
    container_name: app
    build:
      context: .
      dockerfile: src/App/dockerfile
      args:
        WalktrackEnvironment: ${WALKTRACK_ENVIRONMENT}
    expose:
    - 80
    depends_on:
    - entryservice
    - goalservice
    - userservice
    restart: unless-stopped

  proxy:
    container_name: proxy
    build:
      context: .
      dockerfile: infastruction/Proxy/dockerfile
      args:
        WalktrackEnvironment: ${WALKTRACK_ENVIRONMENT}
    volumes:
    - ./data/certbot/www:/var/www/certbot/:ro
    - ./data/certbot/conf:/etc/nginx/ssl/:ro
    ports:
    - "80:80"
    - "443:443"
    depends_on:
    - entryservice
    - goalservice
    - userservice
    - app
    restart: unless-stopped

  certbot:
    image: certbot/certbot:latest
    volumes:
      - ./data/certbot/www:/var/www/certbot/:rw
      - ./data/certbot/conf:/etc/letsencrypt/:rw